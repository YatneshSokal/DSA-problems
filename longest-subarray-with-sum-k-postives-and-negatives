public static int getLongestSubarray(int[] nums, int k) {
    int n = nums.length;
    Map<Integer, Integer> preSumMap = new HashMap<>();
    int sum = 0;
    int maxLen = 0;

    for (int i = 0; i < n; i++) {
        // Calculate the prefix sum
        sum += nums[i];

        // If the sum equals K, update maxLen
        if (sum == k) {
            maxLen = Math.max(maxLen, i + 1);
        }

        // Check if the remaining part (sum - k) exists
        int rem = sum - k;
        if (preSumMap.containsKey(rem)) {
            int len = i - preSumMap.get(rem);
            maxLen = Math.max(maxLen, len);
        }

        // Add current prefix sum to the map if not present
        if (!preSumMap.containsKey(sum)) {
            preSumMap.put(sum, i);
        }
    }

    return maxLen;
}
