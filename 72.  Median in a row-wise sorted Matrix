public final class Solution {
        static int upperBound(int[] arr, int x, int n) {
        int low=0;int high=n-1;
        int ans =n;

        while(low<=high){
            int mid =(low+high)/2;
            if (arr[mid]>x) {
                ans=mid;
                high=mid-1;
            }
            else low=mid+1;
        }
        return ans;
    }
    static int countSmallEqual(int[][] matrix,int m,int n,int x){
        int cnt=0;

        for (int i = 0; i <matrix.length; i++) {
            cnt+=upperBound(matrix[i], x, n);
        }
        return cnt;
    }
    public static int findMedian(int matrix[][], int m, int n) {
        // Write your code here
       int low=Integer.MAX_VALUE;int high=Integer.MIN_VALUE;

        for (int i = 0; i<m; i++) {
            low=Math.min(low,matrix[i][0]);
            high=Math.max(high, matrix[i][n-1]);
        }
        int req=(n*m)/2;
        while (low<=high) {
            int mid=(low+high)/2;
            int countequals=countSmallEqual(matrix, m, n, mid);
            if(countequals>req){
                high=mid-1;
            }
            else low=mid+1;
       }
    return low;
    }
}
